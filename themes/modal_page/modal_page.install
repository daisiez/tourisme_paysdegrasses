<?php

/**
 * @file
 * Install, update and uninstall functions for the Modal Page.
 */

use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Serialization\Yaml;
use Drupal\Core\Url;

/**
 * Implements hook_update_N().
 */
function modal_page_update_8201() {

  if (empty(\Drupal::moduleHandler()->moduleExists('views'))) {
    return FALSE;
  }

  $config_views_path = drupal_get_path('module', 'modal_page') . '/config/optional/views.view.list_modal.yml';

  $data = Yaml::decode(file_get_contents($config_views_path));

  \Drupal::configFactory()->getEditable('views.view.list_modal')->setData($data)->save(TRUE);

  \Drupal::service('cache.render')->invalidateAll();
}

/**
 * Implements hook_update_N().
 *
 * Hook to update the entity modal_page_modal.
 */
function modal_page_update_8202() {
  create_storage_published();
  populate_published_field();

  \Drupal::service('cache.render')->invalidateAll();
}

/**
 * Modal Page with Entities.
 */
function modal_page_update_8001() {
  \Drupal::entityDefinitionUpdateManager()->applyUpdates();
  \Drupal::service('modal_page.modals')->importModalConfigToEntity();

  $messenger = \Drupal::messenger();
  $messenger->addStatus(t('Thanks for use Modal Page 2'));
  $messenger->addStatus(t('You may create Modal by visiting: You may create Modal at: Administration » Structure » Modal'));
}

/**
 * Create the field published.
 */
function create_storage_published() {
  $field_storage_definition = BaseFieldDefinition::create('boolean')
    ->setLabel(t("Published"))
    ->setDefaultValue(TRUE)
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayOptions('form', [
      'type' => 'boolean_checkbox',
      'settings' => [
        'display_label' => TRUE,
      ],
      'weight' => -5,
    ]);

  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('published', 'modal_page_modal', 'modal_page_modal', $field_storage_definition);
}

/**
 * Set field published.
 */
function populate_published_field() {
  $modals = \Drupal::entityTypeManager()->getStorage('modal_page_modal')->loadMultiple();

  foreach ($modals as $modal) {

    $modal->published->setValue(TRUE);
    if ($modal->type->value == 'page' && empty(trim($modal->pages->value))) {
      $modal->published->setValue(FALSE);
    }

    if ($modal->type->value == 'parameter' && empty(trim($modal->paramenters->value))) {
      $modal->published->setValue(FALSE);
    }

    $modal->save();
  }
}

/**
 * Implements hook_install().
 */
function modal_page_install() {
  $messenger = \Drupal::messenger();
  $messenger->addStatus(t('Thanks for installing Modal Page'));
  $messenger->addStatus(t('Create your Modal at <a href="@url_settings">@url_settings</a>', [
    '@url_settings' => Url::fromRoute('modal_page.default')->toString(),
  ]));
  $messenger->addStatus(t('Just check if the js bootstrap (bootstrap.min.js) is already loaded elsewhere,'));
  $messenger->addStatus(t('If yes then check settings called (Dont load external JS Bootstrap) at: <a href="@modal_page_settings">@modal_page_settings</a>', [
    '@modal_page_settings' => Url::fromRoute('modal_page.settings')->toString(),
  ]));
}

/**
 * Implements hook_uninstall().
 */
function modal_page_uninstall() {
  \Drupal::configFactory()->getEditable('modal_page.settings')->delete();
  \Drupal::configFactory()->getEditable('views.view.list_modal')->delete();
}
